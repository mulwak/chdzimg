#! /bin/bash

#
# 動画をchdz用連番画像（いずれは一体型ファイル）に変換
# chdzutl本体に統合したい
#

set -e  # 失敗時点で終了

# 変換パラメータ定数
CONV_OPTS_DEFAULT="+dither"
CONV_OPTS_ANIME="+dither -convolve 0,-1,0,-1,5,-1,0,-1,0"
CONV_OPTS_DITHER=""
CONV_OPTS=${CONV_OPTS_DEFAULT}

# コマンドラインオプションの処理
while getopts vr:p: O
do
  case ${O} in
    # parameter
    p)  case ${OPTARG} in
          anime)  CONV_OPTS=${CONV_OPTS_ANIME} ;;
          dither) CONV_OPTS=${CONV_OPTS_DITHER} ;;
        esac
        break;;
    # rate
    r);;
    # verbose
    v)  OPT_VERBOSE=1;;
    *);;
  esac
done
shift $((OPTIND-1))

HOME_DIR="$(dirname "$(cd "$(dirname "${BASH_SOURCE:-$0}")" && pwd)")"
SRC_FILE=${1}
DST_FILE=${2}
DST_DIR=${DST_FILE%.*} # 統合動画ファイルが実現したら不要
TMP_DIR=${HOME_DIR}/tmp
COLORS_FILE=${HOME_DIR}"/colors16.png"

if [ "${OPT_VERBOSE}" = "1" ]; then
  echo "HOME_DIR  :"$HOME_DIR
  echo "SRC_FILE  :"$SRC_FILE
  echo "DST_FILE  :"$DST_FILE
  echo "DST_DIR   :"$DST_DIR
  echo "TMP_DIR   :"$TMP_DIR
  echo "CONV_OPTS :"$CONV_OPTS
fi

# 入出力先が存在しなければ何もしない
if [ "${SRC_FILE}" = "" ] || [ "${DST_FILE}" = "" ];then
  echo "Arg1:Source, Arg2:Output"
  exit 1
fi

# 作業ディレクトリの用意
mkdir ${TMP_DIR} -p
rm ${TMP_DIR}/* -f

# 出力ディレクトリの用意
# 統合動画ファイルが実現したら不要
mkdir ${DST_DIR} -p
rm ${DST_DIR}/* -f

# 連番画像にする
ffmpeg -loglevel warning -progress - -i ${SRC_FILE} -r 2 -t 90 -s 256:192 ${TMP_DIR}"/%04d.png" |
  awk 'BEGIN{FS="="}/frame=/{printf("\rCroppedImage:%s",$2); system("");}'

echo ""

COUNTER=1 # 進捗表示用カウンタ

# 画像ごとのループ
while read -d $'\0' fnum; do
  PNG_FILE=${fnum}
  BMP_FILE_NAME=$(basename ${PNG_FILE%.*}).bmp
  BMP_FILE=${TMP_DIR}"/"${BMP_FILE_NAME}
  OUT_FILE_NAME=${BMP_FILE_NAME%.*}
  OUT_FILE=${DST_FILE%.*}"/"${OUT_FILE_NAME}.IMF

  if [ "${OPT_VERBOSE}" = "1" ]; then
    echo "PNG_FILE:"$PNG_FILE
    echo "BMP_FILE:"$BMP_FILE
    echo "OUT_FILE_NAME:"$OUT_FILE_NAME""
    echo "OUT_FILE:"$OUT_FILE
  fi

  # 縮退減色bmp
  convert ${PNG_FILE} ${CONV_OPTS} -map ${COLORS_FILE} -flip bmp3:${BMP_FILE}

  # chdz形式ニブルマップ
  ${HOME_DIR}/bin/bmp2nibble ${BMP_FILE} ${OUT_FILE}

  # 進捗表示
  echo -ne "\rImageConvert:"${COUNTER}
  COUNTER=$((COUNTER+1))
done < <(find ${TMP_DIR} -mindepth 1 -maxdepth 1 -print0 )

echo ""

